// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package trmrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CloseRecommendationsRequest struct {
	//
	//The minimum amount of time in seconds that a channel should have been
	//monitored by lnd to be eligible for close. This value is in place to
	//protect against closing of newer channels.
	MinimumMonitored int64 `protobuf:"varint,1,opt,name=minimum_monitored,json=minimumMonitored,proto3" json:"minimum_monitored,omitempty"`
	//
	//The number of inter-quartile ranges a value needs to be beneath the lower
	//quartile/ above the upper quartile to be considered a lower/upper outlier.
	//Lower values will be more aggressive in recommending channel closes, and
	//upper values will be more conservative. Recommended values are 1.5 for
	//aggressive recommendations and 3 for conservative recommendations.
	OutlierMultiplier float32 `protobuf:"fixed32,2,opt,name=outlier_multiplier,json=outlierMultiplier,proto3" json:"outlier_multiplier,omitempty"`
	//
	//Threshold contains the threshold value that is used to recommend channels
	//for closure.
	//
	// Types that are valid to be assigned to Threshold:
	//	*CloseRecommendationsRequest_UptimeThreshold
	Threshold            isCloseRecommendationsRequest_Threshold `protobuf_oneof:"threshold"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *CloseRecommendationsRequest) Reset()         { *m = CloseRecommendationsRequest{} }
func (m *CloseRecommendationsRequest) String() string { return proto.CompactTextString(m) }
func (*CloseRecommendationsRequest) ProtoMessage()    {}
func (*CloseRecommendationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *CloseRecommendationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseRecommendationsRequest.Unmarshal(m, b)
}
func (m *CloseRecommendationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseRecommendationsRequest.Marshal(b, m, deterministic)
}
func (m *CloseRecommendationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseRecommendationsRequest.Merge(m, src)
}
func (m *CloseRecommendationsRequest) XXX_Size() int {
	return xxx_messageInfo_CloseRecommendationsRequest.Size(m)
}
func (m *CloseRecommendationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseRecommendationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloseRecommendationsRequest proto.InternalMessageInfo

func (m *CloseRecommendationsRequest) GetMinimumMonitored() int64 {
	if m != nil {
		return m.MinimumMonitored
	}
	return 0
}

func (m *CloseRecommendationsRequest) GetOutlierMultiplier() float32 {
	if m != nil {
		return m.OutlierMultiplier
	}
	return 0
}

type isCloseRecommendationsRequest_Threshold interface {
	isCloseRecommendationsRequest_Threshold()
}

type CloseRecommendationsRequest_UptimeThreshold struct {
	UptimeThreshold float32 `protobuf:"fixed32,3,opt,name=uptime_threshold,json=uptimeThreshold,proto3,oneof"`
}

func (*CloseRecommendationsRequest_UptimeThreshold) isCloseRecommendationsRequest_Threshold() {}

func (m *CloseRecommendationsRequest) GetThreshold() isCloseRecommendationsRequest_Threshold {
	if m != nil {
		return m.Threshold
	}
	return nil
}

func (m *CloseRecommendationsRequest) GetUptimeThreshold() float32 {
	if x, ok := m.GetThreshold().(*CloseRecommendationsRequest_UptimeThreshold); ok {
		return x.UptimeThreshold
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CloseRecommendationsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CloseRecommendationsRequest_UptimeThreshold)(nil),
	}
}

type CloseRecommendationsResponse struct {
	//
	//The total number of channels, before filtering out channels that are
	//not eligible for close recommendations.
	TotalChannels int32 `protobuf:"varint,1,opt,name=total_channels,json=totalChannels,proto3" json:"total_channels,omitempty"`
	//
	//The number of channels that were considered for close recommendations.
	ConsideredChannels int32 `protobuf:"varint,2,opt,name=considered_channels,json=consideredChannels,proto3" json:"considered_channels,omitempty"`
	//
	//A map of channels to close recommendations, based out whether they are
	//outliers in the uptime dataset. The absence of a channel in this set
	//implies that it was not considered for close because it did not meet
	//the criteria for close (it is private, or has not been monitored for
	//long enough to make a decision).
	OutlierRecommendations []*Recommendation `protobuf:"bytes,3,rep,name=outlier_recommendations,json=outlierRecommendations,proto3" json:"outlier_recommendations,omitempty"`
	//
	//A set of channel close recommendations, based out whether they are
	//beneath the threshold provided in the request. The absence of a channel
	//in this set implies that it was not considered for close because it
	//did not meet the criteria for close (it is private, or has not been
	//monitored for long enough to make a decision).
	ThresholdRecommendations []*Recommendation `protobuf:"bytes,4,rep,name=threshold_recommendations,json=thresholdRecommendations,proto3" json:"threshold_recommendations,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}          `json:"-"`
	XXX_unrecognized         []byte            `json:"-"`
	XXX_sizecache            int32             `json:"-"`
}

func (m *CloseRecommendationsResponse) Reset()         { *m = CloseRecommendationsResponse{} }
func (m *CloseRecommendationsResponse) String() string { return proto.CompactTextString(m) }
func (*CloseRecommendationsResponse) ProtoMessage()    {}
func (*CloseRecommendationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

func (m *CloseRecommendationsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseRecommendationsResponse.Unmarshal(m, b)
}
func (m *CloseRecommendationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseRecommendationsResponse.Marshal(b, m, deterministic)
}
func (m *CloseRecommendationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseRecommendationsResponse.Merge(m, src)
}
func (m *CloseRecommendationsResponse) XXX_Size() int {
	return xxx_messageInfo_CloseRecommendationsResponse.Size(m)
}
func (m *CloseRecommendationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseRecommendationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloseRecommendationsResponse proto.InternalMessageInfo

func (m *CloseRecommendationsResponse) GetTotalChannels() int32 {
	if m != nil {
		return m.TotalChannels
	}
	return 0
}

func (m *CloseRecommendationsResponse) GetConsideredChannels() int32 {
	if m != nil {
		return m.ConsideredChannels
	}
	return 0
}

func (m *CloseRecommendationsResponse) GetOutlierRecommendations() []*Recommendation {
	if m != nil {
		return m.OutlierRecommendations
	}
	return nil
}

func (m *CloseRecommendationsResponse) GetThresholdRecommendations() []*Recommendation {
	if m != nil {
		return m.ThresholdRecommendations
	}
	return nil
}

type Recommendation struct {
	//
	//The channel point [funding txid: outpoint] of the channel being considered
	//for close.
	ChanPoint string `protobuf:"bytes,1,opt,name=chan_point,json=chanPoint,proto3" json:"chan_point,omitempty"`
	// The value of the metric that close recommendations were based on.
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	// A boolean indicating whether we recommend closing the channel.
	RecommendClose       bool     `protobuf:"varint,3,opt,name=recommend_close,json=recommendClose,proto3" json:"recommend_close,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Recommendation) Reset()         { *m = Recommendation{} }
func (m *Recommendation) String() string { return proto.CompactTextString(m) }
func (*Recommendation) ProtoMessage()    {}
func (*Recommendation) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{2}
}

func (m *Recommendation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Recommendation.Unmarshal(m, b)
}
func (m *Recommendation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Recommendation.Marshal(b, m, deterministic)
}
func (m *Recommendation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recommendation.Merge(m, src)
}
func (m *Recommendation) XXX_Size() int {
	return xxx_messageInfo_Recommendation.Size(m)
}
func (m *Recommendation) XXX_DiscardUnknown() {
	xxx_messageInfo_Recommendation.DiscardUnknown(m)
}

var xxx_messageInfo_Recommendation proto.InternalMessageInfo

func (m *Recommendation) GetChanPoint() string {
	if m != nil {
		return m.ChanPoint
	}
	return ""
}

func (m *Recommendation) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Recommendation) GetRecommendClose() bool {
	if m != nil {
		return m.RecommendClose
	}
	return false
}

type RevenueReportRequest struct {
	//
	//The funding transaction outpoints for the channels to generate a revenue
	//report for. If this is empty, it will be generated for all open and closed
	//channels. Channel funding points should be expressed with the format
	//fundingTxID:outpoint.
	ChanPoints []string `protobuf:"bytes,1,rep,name=chan_points,json=chanPoints,proto3" json:"chan_points,omitempty"`
	//
	//Start time is beginning of the range over which the report will be
	//generated, expressed as unix epoch offset in seconds.
	StartTime uint64 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	//
	//End time is end of the range over which the report will be
	//generated, expressed as unix epoch offset in seconds.
	EndTime              uint64   `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevenueReportRequest) Reset()         { *m = RevenueReportRequest{} }
func (m *RevenueReportRequest) String() string { return proto.CompactTextString(m) }
func (*RevenueReportRequest) ProtoMessage()    {}
func (*RevenueReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{3}
}

func (m *RevenueReportRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevenueReportRequest.Unmarshal(m, b)
}
func (m *RevenueReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevenueReportRequest.Marshal(b, m, deterministic)
}
func (m *RevenueReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevenueReportRequest.Merge(m, src)
}
func (m *RevenueReportRequest) XXX_Size() int {
	return xxx_messageInfo_RevenueReportRequest.Size(m)
}
func (m *RevenueReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RevenueReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RevenueReportRequest proto.InternalMessageInfo

func (m *RevenueReportRequest) GetChanPoints() []string {
	if m != nil {
		return m.ChanPoints
	}
	return nil
}

func (m *RevenueReportRequest) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *RevenueReportRequest) GetEndTime() uint64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type RevenueReportResponse struct {
	//
	//Reports is a set of pairwise revenue report generated for the channel(s)
	//over the period specified.
	Reports              []*RevenueReport `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RevenueReportResponse) Reset()         { *m = RevenueReportResponse{} }
func (m *RevenueReportResponse) String() string { return proto.CompactTextString(m) }
func (*RevenueReportResponse) ProtoMessage()    {}
func (*RevenueReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{4}
}

func (m *RevenueReportResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevenueReportResponse.Unmarshal(m, b)
}
func (m *RevenueReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevenueReportResponse.Marshal(b, m, deterministic)
}
func (m *RevenueReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevenueReportResponse.Merge(m, src)
}
func (m *RevenueReportResponse) XXX_Size() int {
	return xxx_messageInfo_RevenueReportResponse.Size(m)
}
func (m *RevenueReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RevenueReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RevenueReportResponse proto.InternalMessageInfo

func (m *RevenueReportResponse) GetReports() []*RevenueReport {
	if m != nil {
		return m.Reports
	}
	return nil
}

type RevenueReport struct {
	//
	//Target channel is the channel that the report is generated for; incoming
	//fields in the report mean that this channel was the incoming channel,
	//and the pair as the outgoing, outgoing fields mean that this channel was
	//the outgoing channel and the peer was the incoming channel.
	TargetChannel string `protobuf:"bytes,1,opt,name=target_channel,json=targetChannel,proto3" json:"target_channel,omitempty"`
	//
	//Pair reports maps the channel point of a peer that we generated revenue
	//with to a report detailing the revenue.
	PairReports          map[string]*PairReport `protobuf:"bytes,2,rep,name=pair_reports,json=pairReports,proto3" json:"pair_reports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RevenueReport) Reset()         { *m = RevenueReport{} }
func (m *RevenueReport) String() string { return proto.CompactTextString(m) }
func (*RevenueReport) ProtoMessage()    {}
func (*RevenueReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{5}
}

func (m *RevenueReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevenueReport.Unmarshal(m, b)
}
func (m *RevenueReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevenueReport.Marshal(b, m, deterministic)
}
func (m *RevenueReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevenueReport.Merge(m, src)
}
func (m *RevenueReport) XXX_Size() int {
	return xxx_messageInfo_RevenueReport.Size(m)
}
func (m *RevenueReport) XXX_DiscardUnknown() {
	xxx_messageInfo_RevenueReport.DiscardUnknown(m)
}

var xxx_messageInfo_RevenueReport proto.InternalMessageInfo

func (m *RevenueReport) GetTargetChannel() string {
	if m != nil {
		return m.TargetChannel
	}
	return ""
}

func (m *RevenueReport) GetPairReports() map[string]*PairReport {
	if m != nil {
		return m.PairReports
	}
	return nil
}

type PairReport struct {
	//
	//Amount outgoing msat is the amount in millisatoshis that arrived
	//on the pair channel to be forwarded onwards by our channel.
	AmountOutgoingMsat int64 `protobuf:"varint,1,opt,name=amount_outgoing_msat,json=amountOutgoingMsat,proto3" json:"amount_outgoing_msat,omitempty"`
	//
	//Fees outgoing is the amount of fees in millisatoshis that we
	//attribute to the channel for its role as the outgoing channel in
	//forwards.
	FeesOutgoingMsat int64 `protobuf:"varint,2,opt,name=fees_outgoing_msat,json=feesOutgoingMsat,proto3" json:"fees_outgoing_msat,omitempty"`
	//
	//Amount incoming msat is the amount in millisatoshis that arrived
	//on our channel to be forwarded onwards by the pair channel.
	AmountIncomingMsat int64 `protobuf:"varint,3,opt,name=amount_incoming_msat,json=amountIncomingMsat,proto3" json:"amount_incoming_msat,omitempty"`
	//
	//Fees incoming is the amount of fees in millisatoshis that we
	//attribute to the channel for its role as the incoming channel in
	//forwards.
	FeesIncomingMsat     int64    `protobuf:"varint,4,opt,name=fees_incoming_msat,json=feesIncomingMsat,proto3" json:"fees_incoming_msat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PairReport) Reset()         { *m = PairReport{} }
func (m *PairReport) String() string { return proto.CompactTextString(m) }
func (*PairReport) ProtoMessage()    {}
func (*PairReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{6}
}

func (m *PairReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PairReport.Unmarshal(m, b)
}
func (m *PairReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PairReport.Marshal(b, m, deterministic)
}
func (m *PairReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairReport.Merge(m, src)
}
func (m *PairReport) XXX_Size() int {
	return xxx_messageInfo_PairReport.Size(m)
}
func (m *PairReport) XXX_DiscardUnknown() {
	xxx_messageInfo_PairReport.DiscardUnknown(m)
}

var xxx_messageInfo_PairReport proto.InternalMessageInfo

func (m *PairReport) GetAmountOutgoingMsat() int64 {
	if m != nil {
		return m.AmountOutgoingMsat
	}
	return 0
}

func (m *PairReport) GetFeesOutgoingMsat() int64 {
	if m != nil {
		return m.FeesOutgoingMsat
	}
	return 0
}

func (m *PairReport) GetAmountIncomingMsat() int64 {
	if m != nil {
		return m.AmountIncomingMsat
	}
	return 0
}

func (m *PairReport) GetFeesIncomingMsat() int64 {
	if m != nil {
		return m.FeesIncomingMsat
	}
	return 0
}

func init() {
	proto.RegisterType((*CloseRecommendationsRequest)(nil), "trmrpc.CloseRecommendationsRequest")
	proto.RegisterType((*CloseRecommendationsResponse)(nil), "trmrpc.CloseRecommendationsResponse")
	proto.RegisterType((*Recommendation)(nil), "trmrpc.Recommendation")
	proto.RegisterType((*RevenueReportRequest)(nil), "trmrpc.RevenueReportRequest")
	proto.RegisterType((*RevenueReportResponse)(nil), "trmrpc.RevenueReportResponse")
	proto.RegisterType((*RevenueReport)(nil), "trmrpc.RevenueReport")
	proto.RegisterMapType((map[string]*PairReport)(nil), "trmrpc.RevenueReport.PairReportsEntry")
	proto.RegisterType((*PairReport)(nil), "trmrpc.PairReport")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xdd, 0x4e, 0x1b, 0x3b,
	0x10, 0x3e, 0x9b, 0xe5, 0x2f, 0x93, 0x03, 0x04, 0x9f, 0xc0, 0x09, 0x1c, 0xd0, 0x41, 0xe9, 0x5f,
	0x24, 0xda, 0xa4, 0x4a, 0x6f, 0xaa, 0x5e, 0x16, 0x55, 0x02, 0xa9, 0x08, 0x64, 0xb8, 0x5f, 0xb9,
	0xc9, 0x34, 0x58, 0x5d, 0xdb, 0x8b, 0xed, 0x45, 0xe2, 0x5d, 0xfa, 0x16, 0x7d, 0x84, 0xde, 0xf6,
	0xb6, 0xef, 0x53, 0xd9, 0xeb, 0xdd, 0x4d, 0xd2, 0x94, 0x3b, 0xef, 0xf7, 0x7d, 0x33, 0xdf, 0x78,
	0x66, 0xd6, 0xd0, 0xd4, 0xd9, 0x78, 0x90, 0x69, 0x65, 0x15, 0x59, 0xb3, 0x5a, 0xe8, 0x6c, 0x7c,
	0x70, 0x38, 0x55, 0x6a, 0x9a, 0xe2, 0x90, 0x65, 0x7c, 0xc8, 0xa4, 0x54, 0x96, 0x59, 0xae, 0xa4,
	0x29, 0x54, 0xbd, 0x6f, 0x11, 0xfc, 0x77, 0x9a, 0x2a, 0x83, 0x14, 0xc7, 0x4a, 0x08, 0x94, 0x93,
	0x82, 0xa6, 0x78, 0x97, 0xa3, 0xb1, 0xe4, 0x04, 0x76, 0x04, 0x97, 0x5c, 0xe4, 0x22, 0x11, 0x4a,
	0x72, 0xab, 0x34, 0x4e, 0xba, 0xd1, 0x71, 0xd4, 0x8f, 0x69, 0x3b, 0x10, 0x17, 0x25, 0x4e, 0x5e,
	0x01, 0x51, 0xb9, 0x4d, 0x39, 0xea, 0x44, 0xe4, 0xa9, 0xe5, 0x99, 0x3b, 0x76, 0x1b, 0xc7, 0x51,
	0xbf, 0x41, 0x77, 0x02, 0x73, 0x51, 0x11, 0xe4, 0x04, 0xda, 0x79, 0x66, 0xb9, 0xc0, 0xc4, 0xde,
	0x6a, 0x34, 0xb7, 0x2a, 0x9d, 0x74, 0x63, 0x27, 0x3e, 0xfb, 0x8b, 0x6e, 0x17, 0xcc, 0x4d, 0x49,
	0xbc, 0x6f, 0x41, 0xb3, 0x52, 0xf5, 0xbe, 0x36, 0xe0, 0x70, 0x79, 0xd5, 0x26, 0x53, 0xd2, 0x20,
	0x79, 0x06, 0x5b, 0x56, 0x59, 0x96, 0x26, 0xe3, 0x5b, 0x26, 0x25, 0xa6, 0xc6, 0xd7, 0xbc, 0x4a,
	0x37, 0x3d, 0x7a, 0x1a, 0x40, 0x32, 0x84, 0x7f, 0xc6, 0x4a, 0x1a, 0x3e, 0x41, 0x8d, 0x93, 0x5a,
	0xdb, 0xf0, 0x5a, 0x52, 0x53, 0x55, 0xc0, 0x25, 0xfc, 0x5b, 0xde, 0x50, 0xcf, 0x5b, 0x77, 0xe3,
	0xe3, 0xb8, 0xdf, 0x1a, 0xed, 0x0d, 0x8a, 0xb6, 0x0f, 0xe6, 0x2b, 0xa3, 0x7b, 0x21, 0x6c, 0xa1,
	0x60, 0x72, 0x0d, 0xfb, 0xd5, 0xb5, 0x7e, 0x4b, 0xb9, 0xf2, 0x68, 0xca, 0x6e, 0x15, 0xb8, 0x90,
	0xb4, 0x27, 0x61, 0x6b, 0x1e, 0x22, 0x47, 0x00, 0xee, 0x76, 0x49, 0xa6, 0xb8, 0xb4, 0xbe, 0x17,
	0x4d, 0xda, 0x74, 0xc8, 0x95, 0x03, 0x48, 0x07, 0x56, 0xef, 0x59, 0x9a, 0x63, 0x98, 0x55, 0xf1,
	0x41, 0x5e, 0xc0, 0x76, 0x55, 0x51, 0x32, 0x76, 0xed, 0xf6, 0xe3, 0xd9, 0xa0, 0x5b, 0x15, 0xec,
	0x87, 0xd0, 0xbb, 0x83, 0x0e, 0xc5, 0x7b, 0x94, 0x39, 0x52, 0xcc, 0x94, 0xb6, 0xe5, 0xf2, 0xfc,
	0x0f, 0xad, 0xda, 0xd5, 0x8d, 0x20, 0xee, 0x37, 0x29, 0x54, 0xb6, 0xc6, 0x95, 0x65, 0x2c, 0xd3,
	0x36, 0x71, 0xb3, 0xf6, 0xe6, 0x2b, 0xb4, 0xe9, 0x91, 0x1b, 0x2e, 0x90, 0xec, 0xc3, 0x86, 0xb3,
	0xf6, 0x64, 0xec, 0xc9, 0x75, 0x94, 0x13, 0x47, 0xf5, 0xce, 0x60, 0x77, 0xc1, 0x32, 0x4c, 0x7e,
	0x08, 0xeb, 0xda, 0x23, 0x85, 0x5f, 0x6b, 0xb4, 0x5b, 0xb7, 0x6f, 0x56, 0x5f, 0xaa, 0x7a, 0x3f,
	0x23, 0xd8, 0x9c, 0xa3, 0xfc, 0xf2, 0x30, 0x3d, 0x45, 0x5b, 0x6e, 0x44, 0x68, 0xd8, 0x66, 0x81,
	0x86, 0x65, 0x20, 0xe7, 0xf0, 0x77, 0xc6, 0xb8, 0x5b, 0x84, 0xc2, 0xae, 0xe1, 0xed, 0x9e, 0x2f,
	0xb5, 0x1b, 0x5c, 0x31, 0xae, 0x8b, 0xa3, 0xf9, 0x20, 0xad, 0x7e, 0xa0, 0xad, 0xac, 0x46, 0x0e,
	0x28, 0xb4, 0x17, 0x05, 0xa4, 0x0d, 0xf1, 0x17, 0x7c, 0x08, 0xd6, 0xee, 0x48, 0xfa, 0xb3, 0x53,
	0x6a, 0x8d, 0x48, 0xe9, 0x54, 0x87, 0x86, 0xc9, 0xbd, 0x6b, 0xbc, 0x8d, 0x7a, 0x3f, 0x22, 0x80,
	0x9a, 0x21, 0xaf, 0xa1, 0xc3, 0x84, 0xca, 0xa5, 0x4d, 0x54, 0x6e, 0xa7, 0x8a, 0xcb, 0x69, 0x22,
	0x0c, 0xb3, 0xe1, 0x5f, 0x26, 0x05, 0x77, 0x19, 0xa8, 0x0b, 0xc3, 0x2c, 0x79, 0x09, 0xe4, 0x33,
	0xa2, 0x59, 0xd0, 0x37, 0x8a, 0x7f, 0xdf, 0x31, 0x73, 0xea, 0x3a, 0x3f, 0x97, 0x63, 0x25, 0x2a,
	0x7d, 0x3c, 0x9b, 0xff, 0x3c, 0x50, 0x73, 0xf9, 0xe7, 0xf5, 0x2b, 0x75, 0xfe, 0x59, 0xf5, 0xe8,
	0x7b, 0x04, 0xed, 0x1b, 0xd4, 0x82, 0x4b, 0x66, 0x95, 0xbe, 0x46, 0x7d, 0x8f, 0x9a, 0x30, 0xe8,
	0x2c, 0x7b, 0x06, 0xc8, 0x93, 0xb2, 0x35, 0x8f, 0x3c, 0x6d, 0x07, 0x4f, 0x1f, 0x17, 0x85, 0x7d,
	0xfa, 0xb8, 0xb8, 0x1d, 0x87, 0xcb, 0xf7, 0x29, 0x24, 0x3d, 0xfa, 0x03, 0x5b, 0x64, 0xfb, 0xb4,
	0xe6, 0x5f, 0xdd, 0x37, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2f, 0xf9, 0x5a, 0x87, 0xa8, 0x05,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TerminatorServerClient is the client API for TerminatorServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TerminatorServerClient interface {
	CloseRecommendations(ctx context.Context, in *CloseRecommendationsRequest, opts ...grpc.CallOption) (*CloseRecommendationsResponse, error)
	RevenueReport(ctx context.Context, in *RevenueReportRequest, opts ...grpc.CallOption) (*RevenueReportResponse, error)
}

type terminatorServerClient struct {
	cc *grpc.ClientConn
}

func NewTerminatorServerClient(cc *grpc.ClientConn) TerminatorServerClient {
	return &terminatorServerClient{cc}
}

func (c *terminatorServerClient) CloseRecommendations(ctx context.Context, in *CloseRecommendationsRequest, opts ...grpc.CallOption) (*CloseRecommendationsResponse, error) {
	out := new(CloseRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/trmrpc.TerminatorServer/CloseRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminatorServerClient) RevenueReport(ctx context.Context, in *RevenueReportRequest, opts ...grpc.CallOption) (*RevenueReportResponse, error) {
	out := new(RevenueReportResponse)
	err := c.cc.Invoke(ctx, "/trmrpc.TerminatorServer/RevenueReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerminatorServerServer is the server API for TerminatorServer service.
type TerminatorServerServer interface {
	CloseRecommendations(context.Context, *CloseRecommendationsRequest) (*CloseRecommendationsResponse, error)
	RevenueReport(context.Context, *RevenueReportRequest) (*RevenueReportResponse, error)
}

func RegisterTerminatorServerServer(s *grpc.Server, srv TerminatorServerServer) {
	s.RegisterService(&_TerminatorServer_serviceDesc, srv)
}

func _TerminatorServer_CloseRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminatorServerServer).CloseRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trmrpc.TerminatorServer/CloseRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminatorServerServer).CloseRecommendations(ctx, req.(*CloseRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminatorServer_RevenueReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevenueReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminatorServerServer).RevenueReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trmrpc.TerminatorServer/RevenueReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminatorServerServer).RevenueReport(ctx, req.(*RevenueReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TerminatorServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trmrpc.TerminatorServer",
	HandlerType: (*TerminatorServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CloseRecommendations",
			Handler:    _TerminatorServer_CloseRecommendations_Handler,
		},
		{
			MethodName: "RevenueReport",
			Handler:    _TerminatorServer_RevenueReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
